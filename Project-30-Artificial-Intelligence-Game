# Import necessary libraries
import random  # For random number generation
from math import sqrt  # For square root calculation (not used here but can be for future improvements)

# Define game constants
WIDTH = 600  # Width of the game screen in pixels
HEIGHT = 400  # Height of the game screen in pixels
CELL_SIZE = 20  # Size of each cell or block in the grid, in pixels

# Define the Player class
class Player:
    def __init__(self, x, y, color):
        # Initialize player with starting position and color
        self.x = x  # x-coordinate of the player
        self.y = y  # y-coordinate of the player
        self.color = color  # Color of the player
        self.score = 0  # Initialize score to 0

    def move(self, dx, dy):
        # Move the player by dx, dy multiplied by CELL_SIZE
        self.x += dx * CELL_SIZE  # Update x-coordinate
        self.y += dy * CELL_SIZE  # Update y-coordinate

    def get_position(self):
        # Return the current position of the player as a tuple
        return (self.x, self.y)  # Return x and y coordinates

# Define the Food class
class Food:
    def __init__(self):
        # Initialize food at a random position within the screen boundaries
        self.x = random.randint(0, (WIDTH - CELL_SIZE) // CELL_SIZE) * CELL_SIZE
        self.y = random.randint(0, (HEIGHT - CELL_SIZE) // CELL_SIZE) * CELL_SIZE

    def get_position(self):
        # Return the current position of the food as a tuple
        return (self.x, self.y)  # Return x and y coordinates

# Define the Game class
class Game:
    def __init__(self):
        # Initialize the game with a player and food
        self.player = Player(WIDTH // 2, HEIGHT // 2, "green")  # Create a player at the center of the screen
        self.food = Food()  # Create a food item at a random position

    def update(self):
        # Update the game state
        # Move the player towards the food
        dx = (self.food.x - self.player.x) // abs(self.food.x - self.player.x)  # Calculate x direction
        dy = (self.food.y - self.player.y) // abs(self.food.y - self.player.y)  # Calculate y direction
        self.player.move(dx, dy)  # Move the player

        # Check for collision between player and food
        if self.player.get_position() == self.food.get_position():
            # If player reaches the food, create new food and increment score
            self.food = Food()  # Generate a new food item at a random position
            self.player.score += 1  # Increment the player's score

    def draw(self, screen):
        # Draw the game on the screen
        screen.fill("black")  # Fill the screen with black color
        # Draw the player as a rectangle
        pygame.draw.rect(screen, self.player.color, (self.player.x, self.player.y, CELL_SIZE, CELL_SIZE))
        # Draw the food as a rectangle
        pygame.draw.rect(screen, "red", (self.food.x, self.food.y, CELL_SIZE, CELL_SIZE))

# Note: Optional networking code for multiplayer functionality can be added here (requires additional libraries)

# Main game loop (replace with Pygame event handling)
game = Game()  # Create a new game instance
while True:
    game.update()  # Update the game state
    # Draw the game (using Pygame, not fully implemented here)
    # ...
    # Update the screen (using Pygame, not fully implemented here)
    # ...

# Note: The above code assumes Pygame is used for graphical output, 
# but the actual drawing and screen update code is not provided.
