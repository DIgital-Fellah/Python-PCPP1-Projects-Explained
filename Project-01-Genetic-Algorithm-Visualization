# Import necessary libraries
import tkinter as tk
import random

# Define the Individual class
class Individual:
    # Initialize an individual with genes and placeholder for fitness
    def __init__(self, genes):
        self.genes = genes
        self.fitness = 0  # Placeholder for fitness calculation

    # Function to calculate the fitness of an individual
    def calculate_fitness(self):
        # Example: minimize the sum of squares to zero
        fitness = sum(gene**2 for gene in self.genes)
        self.fitness = fitness * -1  # Negate for minimization

# Define the GeneticAlgorithm class
class GeneticAlgorithm:
    # Initialize the genetic algorithm with parameters
    def __init__(self, population_size, gene_length, mutation_rate, target_fitness):
        self.population_size = population_size  # Number of individuals in the population
        self.gene_length = gene_length  # Length of each individual's gene
        self.mutation_rate = mutation_rate  # Probability of mutation
        self.target_fitness = target_fitness  # Desired fitness value to stop the algorithm
        self.population = self.initialize_population()  # Create initial population
        self.generation = 0  # Track the number of generations

    # Function to initialize the population with random genes
    def initialize_population(self):
        population = []
        for _ in range(self.population_size):
            # Generate random genes for each individual
            genes = [random.randint(0, 1) for _ in range(self.gene_length)]
            population.append(Individual(genes))
        return population

    # Function to select parents for crossover
    def selection(self):
        # Simple selection method (e.g., random selection)
        selected = []
        for _ in range(2):  # Select two parents
            parent = random.choice(self.population)  # Randomly choose an individual
            selected.append(parent)
        return selected

    # Function to perform crossover between two parents
    def crossover(self, parent1, parent2):
        # Single-point crossover
        crossover_point = random.randint(1, self.gene_length - 1)
        # Create child genes by combining parts of both parents
        child1_genes = parent1.genes[:crossover_point] + parent2.genes[crossover_point:]
        child2_genes = parent2.genes[:crossover_point] + parent1.genes[crossover_point:]
        return Individual(child1_genes), Individual(child2_genes)

    # Function to mutate an individual's genes
    def mutation(self, individual):
        for i in range(self.gene_length):
            if random.random() < self.mutation_rate:
                # Flip the gene with a certain probability
                individual.genes[i] = flip_gene(individual.genes[i])

    # Main function to run the genetic algorithm
    def run(self):
        while not self.termination_condition():
            # Selection
            parents = self.selection()  # Select parents for crossover

            # Crossover
            child1, child2 = self.crossover(parents[0], parents[1])  # Generate children

            # Mutation
            self.mutation(child1)  # Mutate the first child
            self.mutation(child2)  # Mutate the second child

            # Replace the least fit individuals with the new children
            self.population.sort(key=lambda ind: ind.fitness)  # Sort population by fitness
            self.population[1:3] = [child1, child2]  # Replace the two least fit individuals

            # Calculate fitness for the new generation
            for individual in self.population:
                individual.calculate_fitness()  # Update fitness of each individual

            self.generation += 1  # Increment the generation count

            # Update the GUI (implementation in update_gui function)
            update_gui(self)

    # Function to check if the termination condition is met
    def termination_condition(self):
        # Stop if the best individual meets the target fitness or if max generations reached
        best_individual = min(self.population, key=lambda ind: ind.fitness)
        return best_individual.fitness >= self.target_fitness or self.generation >= 100

# Helper function to flip a gene (0 to 1 or 1 to 0)
def flip_gene(gene):
    return 0 if gene else 1

# Define GUI update function (replace with Tkinter code for visualization)
def update_gui(ga):
    # Example: Update labels with generation, best fitness, etc.
    # ...

# Main function to set up and run the genetic algorithm
def main():
    # Define genetic algorithm parameters
    population_size = 100  # Number of individuals in the population
    gene_length = 10  # Number of genes per individual
    mutation_rate = 0.01  # Probability of gene mutation
    target_fitness = 0  # Fitness value to stop the algorithm

    # Create a genetic algorithm object with the parameters
    ga = GeneticAlgorithm(population_size, gene_length, mutation_rate, target_fitness)

    # Start the genetic algorithm simulation
    ga.run()

# Run the main function if this script is executed
if __name__ == "__main__":
    main()  # Execute the main function

# END OF CODE
# The code defines a genetic algorithm to minimize the sum of squares of genes.
# It includes selection, crossover, and mutation operations.
# A simple GUI update function is defined for future implementation.

