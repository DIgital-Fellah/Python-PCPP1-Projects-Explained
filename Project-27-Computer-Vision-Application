import cv2  # Import OpenCV library for image processing

class IPCVApp:
    """
    A basic Image Processing and Computer Vision Application.
    This class handles setting tasks, loading images, processing images, and displaying images.
    """
    def __init__(self):
        # Initialize instance variables
        self.task = None  # This will hold the selected computer vision task (e.g., object detection)
        self.model = None  # This will hold the machine learning model if one is used
        self.image = None  # This will hold the loaded image

    def set_task(self, task):
        """
        Sets the desired computer vision task.
        
        Parameters:
        task (str): The computer vision task to be performed (e.g., "object_detection").
        """
        self.task = task  # Assign the task to the instance variable

    def load_image(self, path):
        """
        Loads an image from a specified path.
        
        Parameters:
        path (str): The file path to the image that needs to be loaded.
        """
        self.image = cv2.imread(path)  # Read the image from the specified file path using OpenCV

    def process_image(self):
        """
        Performs the selected task on the loaded image.
        
        This method should include logic for different computer vision tasks.
        """
        if self.task == "object_detection":
            # Placeholder for object detection logic
            # Here you would add code to detect objects in the image
            pass  # 'pass' is a placeholder that does nothing
        elif self.task == "facial_recognition":
            # Placeholder for facial recognition logic
            # Here you would add code to recognize faces in the image
            pass  # 'pass' is a placeholder that does nothing
        else:
            # Print a message if the task is not supported
            print("Task not supported yet")

    def display_image(self):
        """
        Displays the processed image with annotations (if applicable).
        
        This method shows the image in a window. You need to close the window manually.
        """
        if self.image is not None:
            # Display the image in a window named "IPCVApp"
            cv2.imshow("IPCVApp", self.image)  # Show the image using OpenCV
            cv2.waitKey(0)  # Wait indefinitely for a key press
            cv2.destroyAllWindows()  # Close the window when a key is pressed

# Example usage of the IPCVApp class
app = IPCVApp()  # Create an instance of IPCVApp
app.set_task("object_detection")  # Set the task to "object_detection"
app.load_image("image.jpg")  # Load an image from the file path "image.jpg"
app.process_image()  # Process the loaded image based on the set task
app.display_image()  # Display the processed image
